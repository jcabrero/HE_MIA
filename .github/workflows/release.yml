name: Build and Release

on: [push]

jobs:
  create_release:
    name: Create Github Release
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.get_url.outputs.value }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false
          
      - name: Output Release URL File
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
        
      - name: Create URL
        id: get_url
        run:
          echo "::set-output name=value::${{ steps.create_release.outputs.upload_url }}"
           
           
      - name: Save Release URL File for publish
        uses: actions/upload-artifact@v1
        with:
          name: release_url
          path: release_url.txt
        
  build_wheels:
    #needs: [create_release] # TODO: Comment
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    outputs:
      matrix: ${{ steps.matrix.outputs.value }}
    strategy:
      matrix:
        #os: [ubuntu-20.04, windows-2019, macOS-10.15]
        os: [ubuntu-20.04]
    steps:
      - uses: actions/checkout@v2

      # Used to host cibuildwheel
      - uses: actions/setup-python@v2
      
      #- name: Set up Go
      #  uses: actions/setup-go@v2
      #  with:
      #    go-version: 1.17

      # - name: Set up Go Env
      #  working-directory: ./src/
      #  run: go mod tidy

      # - name: Build
      #  working-directory: ./src/
      #  run: make build
      
      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.3.1

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        working-directory: ./src/
        # to supply options, put them in 'env', like:
        env:
          CIBW_BUILD: "cp*-manylinux_*"
          #CIBW_BUILD: "cp38-manylinux_*"
          CIBW_ARCHS: "x86_64"
          CIBW_PROJECT_REQUIRES_PYTHON: ">=3.6"
          CIBW_ENVIRONMENT: PATH=$PATH:/usr/local/go/bin
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          #CIBW_BEFORE_BUILD:
          CIBW_BEFORE_ALL:
            pip install certifi numpy && 
            curl -O https://go.dev/dl/go1.17.6.linux-amd64.tar.gz --location &&
            tar -xzf go1.17.6.linux-amd64.tar.gz &&
            (rm -rf /usr/local/go || true) &&
            mv go /usr/local/go &&
            go mod tidy
      
      - name: View Matrix
        run: ls -Q --format=commas ./src/wheelhouse
        
      - name: Create Matrix
        id: matrix
        run:
          echo "::set-output name=value::$(python3 -c 'import os, json; print(json.dumps(os.listdir("./src/wheelhouse")))')"
          #echo "::set-output name=value::$(ls ./src/wheelhouse | jq -R -s -c 'split("\n")[:-1]')"



      - name: ECHO Matrix
        run:
          echo "${{ steps.matrix.outputs.value }}"
      #Â - name: Create Vertical Matrix
      #  id: vmatrix
      #  run:
      #    echo "::set-output name=value::[$(ls --format=single-column -d -1 ./src/wheelhouse/**)]"
      
      # - name: Release
      #  uses: softprops/action-gh-release@v1
      #  #if: startsWith(github.ref, 'refs/tags/')
      #  with:
      #    files: ${{ steps.vmatrix.outputs.value }}          

      - uses: actions/upload-artifact@v2
        with:
          name: wheelhouse
          path: ./src/wheelhouse/*.whl
          
  upload_wheels:
    needs: [build_wheels, create_release]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        value: ${{ fromJson(needs.build_wheels.outputs.matrix) }}
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: wheelhouse
          
      - name: Display structure of downloaded files
        run: ls -R
        #working-directory: path/to/artifact
      
      - name: upload linux artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./${{ matrix.value }}
          asset_name: ${{ matrix.value }}
          asset_content_type: python/whl

  # trigger_pull:
  #   needs: [build_wheels, create_release]  
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout REPO1
  #       uses: actions/checkout@v2
  #       with:
  #         path: /tmp/

  #     - name: Checkout REPO2
  #       uses: actions/checkout@v2
  #       with:
  #         repository: jcabrero/HE_MIA_Public
  #         path: /tmp/
  #         persist-credentials: false
  #         fetch-depth: 0

  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: wheelhouse

  #     - name: Update
  #       run: |
  #         cp /tmp/HE_MIA/notebooks/* /tmp/HE_MIA_Public/notebooks/
  #         cp /tmp/HE_MIA/README.md /tmp/HE_MIA_Public/README.md
  #         git config --local user.email "$GITHUB_EMAIL"
  #         git config --local user.name "$GITHUB_USERNAME"
  #         git commit -m "${{ github.event.head_commit.message }}" -a
  #       env:
  #         GITHUB_USERNAME: jcabrero
  #         GITHUB_EMAIL: jcabreroholgueras@gmail.com
  #     - name: Push changes on REPO2
  #       uses: ad-m/github-push-action@master
  #       with:
  #         github_token: ${{ secrets.ACTION_SECRET }}
  #         branch: ${{ github.ref }}
